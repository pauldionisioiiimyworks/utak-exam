{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\");\n    }\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n  get seconds() {\n    return this._seconds;\n  }\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\");\n    }\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}","map":{"version":3,"names":["isDate","isNumber","MIN_SECONDS","FirestoreTimestamp","now","fromMillis","Date","fromDate","date","Error","getTime","milliseconds","seconds","Math","floor","nanoseconds","constructor","_seconds","_nanoseconds","isEqual","other","toDate","toMillis","toString","toJSON","valueOf","adjustedSeconds","formattedSeconds","String","padStart","formattedNanoseconds"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreTimestamp.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\n        \"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\",\n      );\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\n        \"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\",\n      );\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n  toJSON() {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}