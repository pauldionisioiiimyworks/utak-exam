{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nexport default class FirestoreTransaction {\n  constructor(firestore, meta) {\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n  _prepare() {\n    this._calledGetCount = 0;\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   */\n  get(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\");\n    }\n    this._calledGetCount++;\n    return this._firestore.native.transactionGetDocument(this._meta.id, documentRef.path).then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   */\n  set(documentRef, data, options) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\");\n    }\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\");\n    }\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().runTransaction() Transaction.set(_, _, *) ${e.message}.`);\n    }\n    this._commandBuffer.push({\n      type: 'SET',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions\n    });\n    return this;\n  }\n  update(documentRef, ...args) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\");\n    }\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().runTransaction() Transaction.update(_, *) ${e.message}`);\n    }\n    this._commandBuffer.push({\n      type: 'UPDATE',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties)\n    });\n    return this;\n  }\n  delete(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\");\n    }\n    this._commandBuffer.push({\n      type: 'DELETE',\n      path: documentRef.path\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["isObject","FirestoreDocumentReference","FirestoreDocumentSnapshot","parseSetOptions","parseUpdateArgs","buildNativeMap","FirestoreTransaction","constructor","firestore","meta","_firestore","_meta","_prepare","_calledGetCount","_commandBuffer","_pendingResult","undefined","get","documentRef","Error","native","transactionGetDocument","id","path","then","data","set","options","setOptions","e","message","push","type","_settings","ignoreUndefinedProperties","update","args","delete"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreTransaction.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreTransaction {\n  constructor(firestore, meta) {\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n  _prepare() {\n    this._calledGetCount = 0;\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   */\n  get(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._calledGetCount++;\n    return this._firestore.native\n      .transactionGetDocument(this._meta.id, documentRef.path)\n      .then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   */\n  set(documentRef, data, options) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\",\n      );\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.set(_, _, *) ${e.message}.`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'SET',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.update(_, *) ${e.message}`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'UPDATE',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n\n  delete(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'DELETE',\n      path: documentRef.path,\n    });\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}