{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, { provideDocumentSnapshotClass } from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n  get exists() {\n    return this._exists;\n  }\n  get id() {\n    return this._ref.id;\n  }\n  get metadata() {\n    return this._metadata;\n  }\n  get ref() {\n    return this._ref;\n  }\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath) && !Array.isArray(fieldPath)) {\n      throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string, array or FieldPath.\");\n    }\n    let path;\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else if (isArray(fieldPath)) {\n      path = new FirestoreFieldPath(...fieldPath);\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n    return extractFieldPathData(this._data, path._segments);\n  }\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\");\n    }\n    if (this.exists !== other.exists || !this.metadata.isEqual(other.metadata) || !this.ref.isEqual(other.ref)) {\n      return false;\n    }\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);","map":{"version":3,"names":["isArray","isString","FirestoreDocumentReference","provideDocumentSnapshotClass","FirestoreFieldPath","fromDotSeparatedString","FirestorePath","FirestoreSnapshotMetadata","extractFieldPathData","parseNativeMap","FirestoreDocumentSnapshot","constructor","firestore","nativeData","_data","data","_metadata","metadata","_ref","fromName","path","_exists","exists","id","ref","get","fieldPath","Array","Error","e","message","_segments","isEqual","other","thisData","JSON","stringify","otherData"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentSnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, {\n  provideDocumentSnapshotClass,\n} from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\n\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (\n      !isString(fieldPath) &&\n      !(fieldPath instanceof FirestoreFieldPath) &&\n      !Array.isArray(fieldPath)\n    ) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string, array or FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else if (isArray(fieldPath)) {\n      path = new FirestoreFieldPath(...fieldPath);\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\",\n      );\n    }\n\n    if (\n      this.exists !== other.exists ||\n      !this.metadata.isEqual(other.metadata) ||\n      !this.ref.isEqual(other.ref)\n    ) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}