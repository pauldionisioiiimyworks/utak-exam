{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isBoolean, isFunction, isNumber, isObject, isString, isUndefined, isAndroid } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\nconst namespace = 'firestore';\nconst nativeModuleName = ['RNFBFirestoreModule', 'RNFBFirestoreCollectionModule', 'RNFBFirestoreDocumentModule', 'RNFBFirestoreTransactionModule'];\nconst nativeEvents = ['firestore_collection_sync_event', 'firestore_document_sync_event', 'firestore_transaction_event'];\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this);\n\n    // Fan out native events\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`), event);\n    });\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`), event);\n    });\n    this._settings = {\n      ignoreUndefinedProperties: false\n    };\n  }\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n  loadBundle(bundle) {\n    if (!isString(bundle)) {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a string value.\");\n    }\n    if (bundle === '') {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a non-empty string.\");\n    }\n    return this.native.loadBundle(bundle);\n  }\n  namedQuery(queryName) {\n    if (!isString(queryName)) {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a string value.\");\n    }\n    if (queryName === '') {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a non-empty string.\");\n    }\n    return new FirestoreQuery(this, this._referencePath, new FirestoreQueryModifiers(), queryName);\n  }\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n  async terminate() {\n    await this.native.terminate();\n  }\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    const androidBypassEmulatorUrlRemap = typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' && this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log('Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a string value.\");\n    }\n    if (collectionPath === '') {\n      throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\");\n    }\n    const path = this._referencePath.child(collectionPath);\n    if (!path.isCollection) {\n      throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\");\n    }\n    return new FirestoreCollectionReference(this, path);\n  }\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\");\n    }\n    if (collectionId === '') {\n      throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\");\n    }\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\");\n    }\n    return new FirestoreQuery(this, this._referencePath.child(collectionId), new FirestoreQueryModifiers().asCollectionGroupQuery(), undefined);\n  }\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n    const path = this._referencePath.child(documentPath);\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n    return new FirestoreDocumentReference(this, path);\n  }\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"));\n    }\n    return this._transactionHandler._add(updateFunction);\n  }\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"));\n    }\n    const keys = Object.keys(settings);\n    const opts = ['cacheSizeBytes', 'host', 'persistence', 'ssl', 'ignoreUndefinedProperties', 'serverTimestampBehavior'];\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!opts.includes(key)) {\n        return Promise.reject(new Error(`firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`));\n      }\n    }\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\"));\n      }\n      if (settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\"));\n      }\n    }\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn('host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.');\n      if (!isString(settings.host)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"));\n      }\n      if (settings.host === '') {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\"));\n      }\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log('Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log('Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n    }\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\"));\n    }\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n    if (!isUndefined(settings.serverTimestampBehavior) && !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)) {\n      return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\"));\n    }\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\"));\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n      delete settings.ignoreUndefinedProperties;\n    }\n    return this.native.settings(settings);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/firestore';\nexport const SDK_VERSION = version;\nexport * from './modular';\n\n// import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule\n});\n\n// import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\nexport const firebase = getFirebaseRoot();","map":{"version":3,"names":["isBoolean","isFunction","isNumber","isObject","isString","isUndefined","isAndroid","createModuleNamespace","FirebaseModule","getFirebaseRoot","FirestoreCollectionReference","FirestoreDocumentReference","FirestorePath","FirestoreQuery","FirestoreQueryModifiers","FirestoreStatics","FirestoreTransactionHandler","FirestoreWriteBatch","version","namespace","nativeModuleName","nativeEvents","FirebaseFirestoreModule","constructor","app","config","_referencePath","_transactionHandler","emitter","addListener","eventNameForApp","event","emit","listenerId","_settings","ignoreUndefinedProperties","batch","loadBundle","bundle","Error","native","namedQuery","queryName","clearPersistence","waitForPendingWrites","terminate","useEmulator","host","port","_host","androidBypassEmulatorUrlRemap","firebaseJson","android_bypass_emulator_url_remap","console","log","collection","collectionPath","path","child","isCollection","collectionGroup","collectionId","indexOf","asCollectionGroupQuery","undefined","disableNetwork","doc","documentPath","isDocument","enableNetwork","runTransaction","updateFunction","Promise","reject","_add","settings","keys","Object","opts","i","length","key","includes","cacheSizeBytes","CACHE_SIZE_UNLIMITED","warn","startsWith","replace","persistence","ssl","serverTimestampBehavior","SDK_VERSION","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isAndroid,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\n\nconst namespace = 'firestore';\n\nconst nativeModuleName = [\n  'RNFBFirestoreModule',\n  'RNFBFirestoreCollectionModule',\n  'RNFBFirestoreDocumentModule',\n  'RNFBFirestoreTransactionModule',\n];\n\nconst nativeEvents = [\n  'firestore_collection_sync_event',\n  'firestore_document_sync_event',\n  'firestore_transaction_event',\n];\n\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this);\n\n    // Fan out native events\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this._settings = {\n      ignoreUndefinedProperties: false,\n    };\n  }\n\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n\n  loadBundle(bundle) {\n    if (!isString(bundle)) {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a string value.\");\n    }\n\n    if (bundle === '') {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a non-empty string.\");\n    }\n\n    return this.native.loadBundle(bundle);\n  }\n\n  namedQuery(queryName) {\n    if (!isString(queryName)) {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a string value.\");\n    }\n\n    if (queryName === '') {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a non-empty string.\");\n    }\n\n    return new FirestoreQuery(this, this._referencePath, new FirestoreQueryModifiers(), queryName);\n  }\n\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n\n  async terminate() {\n    await this.native.terminate();\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    const androidBypassEmulatorUrlRemap =\n      typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' &&\n      this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this, path);\n  }\n\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\",\n      );\n    }\n\n    if (collectionId === '') {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\",\n      );\n    }\n\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\",\n      );\n    }\n\n    return new FirestoreQuery(\n      this,\n      this._referencePath.child(collectionId),\n      new FirestoreQueryModifiers().asCollectionGroupQuery(),\n      undefined,\n    );\n  }\n\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n\n    return new FirestoreDocumentReference(this, path);\n  }\n\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"),\n      );\n    }\n\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"),\n      );\n    }\n\n    const keys = Object.keys(settings);\n\n    const opts = [\n      'cacheSizeBytes',\n      'host',\n      'persistence',\n      'ssl',\n      'ignoreUndefinedProperties',\n      'serverTimestampBehavior',\n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!opts.includes(key)) {\n        return Promise.reject(\n          new Error(\n            `firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`,\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\",\n          ),\n        );\n      }\n\n      if (\n        settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\",\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.',\n      );\n      if (!isString(settings.host)) {\n        return Promise.reject(\n          new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"),\n        );\n      }\n\n      if (settings.host === '') {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\",\n          ),\n        );\n      }\n\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n      }\n    }\n\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n\n    if (\n      !isUndefined(settings.serverTimestampBehavior) &&\n      !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)\n    ) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\",\n          ),\n        );\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n\n      delete settings.ignoreUndefinedProperties;\n    }\n\n    return this.native.settings(settings);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/firestore';\nexport const SDK_VERSION = version;\n\nexport * from './modular';\n\n// import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule,\n});\n\n// import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}