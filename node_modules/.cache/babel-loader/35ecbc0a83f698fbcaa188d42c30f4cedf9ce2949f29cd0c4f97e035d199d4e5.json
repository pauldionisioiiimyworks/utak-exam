{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\nexport default class FirestoreBlob {\n  constructor(internal = false, binaryString) {\n    if (internal === false) {\n      throw new Error('firebase.firestore.Blob constructor is private, use Blob.<field>() instead.');\n    }\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n    }\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n    return new FirestoreBlob(true, Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''));\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}","map":{"version":3,"names":["Base64","isString","FirestoreBlob","constructor","internal","binaryString","Error","_binaryString","fromBase64String","base64","length","atob","fromUint8Array","array","Uint8Array","Array","prototype","map","call","$","String","fromCharCode","join","isEqual","blob","toBase64","btoa","toUint8Array","split","c","charCodeAt","toString"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreBlob.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\n\nexport default class FirestoreBlob {\n  constructor(internal = false, binaryString) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.Blob constructor is private, use Blob.<field>() instead.',\n      );\n    }\n\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error(\n        'firestore.Blob.fromBase64String expects a string of at least 1 character in length',\n      );\n    }\n\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new FirestoreBlob(\n      true,\n      Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''),\n    );\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,uCAAuC;AAExE,eAAe,MAAMC,aAAa,CAAC;EACjCC,WAAWA,CAACC,QAAQ,GAAG,KAAK,EAAEC,YAAY,EAAE;IAC1C,IAAID,QAAQ,KAAK,KAAK,EAAE;MACtB,MAAM,IAAIE,KAAK,CACb,6EACF,CAAC;IACH;IAEA,IAAI,CAACC,aAAa,GAAGF,YAAY;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOG,gBAAgBA,CAACC,MAAM,EAAE;IAC9B,IAAI,CAACR,QAAQ,CAACQ,MAAM,CAAC,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MAC1C,MAAM,IAAIJ,KAAK,CACb,oFACF,CAAC;IACH;IAEA,OAAO,IAAIJ,aAAa,CAAC,IAAI,EAAEF,MAAM,CAACW,IAAI,CAACF,MAAM,CAAC,CAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOG,cAAcA,CAACC,KAAK,EAAE;IAC3B,IAAI,EAAEA,KAAK,YAAYC,UAAU,CAAC,EAAE;MAClC,MAAM,IAAIR,KAAK,CAAC,iEAAiE,CAAC;IACpF;IAEA,OAAO,IAAIJ,aAAa,CACtB,IAAI,EACJa,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,IAAI,CAACL,KAAK,EAAEM,CAAC,IAAIC,MAAM,CAACC,YAAY,CAACF,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,EAAE,CACtE,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAACC,IAAI,EAAE;IACZ,IAAI,EAAEA,IAAI,YAAYtB,aAAa,CAAC,EAAE;MACpC,MAAM,IAAII,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,OAAO,IAAI,CAACC,aAAa,KAAKiB,IAAI,CAACjB,aAAa;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEkB,QAAQA,CAAA,EAAG;IACT,OAAOzB,MAAM,CAAC0B,IAAI,CAAC,IAAI,CAACnB,aAAa,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEoB,YAAYA,CAAA,EAAG;IACb,OAAO,IAAIb,UAAU,CAAC,IAAI,CAACP,aAAa,CAACqB,KAAK,CAAC,EAAE,CAAC,CAACX,GAAG,CAACY,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/E;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAAA,EAAG;IACT,OAAQ,0BAAyB,IAAI,CAACN,QAAQ,CAAC,CAAE,GAAE;EACrD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}