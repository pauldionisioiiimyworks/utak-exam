{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nexport default class FirestoreWriteBatch {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n  _verifyNotCommitted(method) {\n    if (this._committed) {\n      throw new Error(`firebase.firestore.batch().${method}(*) A write batch can no longer be used after commit() has been called.`);\n    }\n  }\n  commit() {\n    this._verifyNotCommitted('commit');\n    this._committed = true;\n    if (this._writes.length === 0) {\n      return Promise.resolve();\n    }\n    return this._firestore.native.documentBatch(this._writes);\n  }\n  delete(documentRef) {\n    this._verifyNotCommitted('delete');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\");\n    }\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n    }\n    this._writes.push({\n      path: documentRef.path,\n      type: 'DELETE'\n    });\n    return this;\n  }\n  set(documentRef, data, options) {\n    this._verifyNotCommitted('set');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\");\n    }\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n    }\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n    }\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n    this._writes.push({\n      path: documentRef.path,\n      type: 'SET',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions\n    });\n    return this;\n  }\n  update(documentRef, ...args) {\n    this._verifyNotCommitted('update');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\");\n    }\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n    }\n    if (args.length === 0) {\n      throw new Error('firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.');\n    }\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().batch().update(_, *) ${e.message}`);\n    }\n    this._writes.push({\n      path: documentRef.path,\n      type: 'UPDATE',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties)\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["isObject","FirestoreDocumentReference","parseSetOptions","parseUpdateArgs","buildNativeMap","FirestoreWriteBatch","constructor","firestore","_firestore","_writes","_committed","_verifyNotCommitted","method","Error","commit","length","Promise","resolve","native","documentBatch","delete","documentRef","app","push","path","type","set","data","options","setOptions","e","message","_settings","ignoreUndefinedProperties","update","args"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreWriteBatch.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreWriteBatch {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n\n  _verifyNotCommitted(method) {\n    if (this._committed) {\n      throw new Error(\n        `firebase.firestore.batch().${method}(*) A write batch can no longer be used after commit() has been called.`,\n      );\n    }\n  }\n\n  commit() {\n    this._verifyNotCommitted('commit');\n    this._committed = true;\n    if (this._writes.length === 0) {\n      return Promise.resolve();\n    }\n    return this._firestore.native.documentBatch(this._writes);\n  }\n\n  delete(documentRef) {\n    this._verifyNotCommitted('delete');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'DELETE',\n    });\n\n    return this;\n  }\n\n  set(documentRef, data, options) {\n    this._verifyNotCommitted('set');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'SET',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    this._verifyNotCommitted('update');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (args.length === 0) {\n      throw new Error(\n        'firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.',\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().batch().update(_, *) ${e.message}`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'UPDATE',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,uCAAuC;AAChE,OAAOC,0BAA0B,MAAM,8BAA8B;AACrE,SAASC,eAAe,EAAEC,eAAe,QAAQ,SAAS;AAC1D,SAASC,cAAc,QAAQ,mBAAmB;AAElD,eAAe,MAAMC,mBAAmB,CAAC;EACvCC,WAAWA,CAACC,SAAS,EAAE;IACrB,IAAI,CAACC,UAAU,GAAGD,SAAS;IAC3B,IAAI,CAACE,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,UAAU,GAAG,KAAK;EACzB;EAEAC,mBAAmBA,CAACC,MAAM,EAAE;IAC1B,IAAI,IAAI,CAACF,UAAU,EAAE;MACnB,MAAM,IAAIG,KAAK,CACZ,8BAA6BD,MAAO,yEACvC,CAAC;IACH;EACF;EAEAE,MAAMA,CAAA,EAAG;IACP,IAAI,CAACH,mBAAmB,CAAC,QAAQ,CAAC;IAClC,IAAI,CAACD,UAAU,GAAG,IAAI;IACtB,IAAI,IAAI,CAACD,OAAO,CAACM,MAAM,KAAK,CAAC,EAAE;MAC7B,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC;IAC1B;IACA,OAAO,IAAI,CAACT,UAAU,CAACU,MAAM,CAACC,aAAa,CAAC,IAAI,CAACV,OAAO,CAAC;EAC3D;EAEAW,MAAMA,CAACC,WAAW,EAAE;IAClB,IAAI,CAACV,mBAAmB,CAAC,QAAQ,CAAC;IAClC,IAAI,EAAEU,WAAW,YAAYpB,0BAA0B,CAAC,EAAE;MACxD,MAAM,IAAIY,KAAK,CACb,8FACF,CAAC;IACH;IAEA,IAAIQ,WAAW,CAACd,SAAS,CAACe,GAAG,KAAK,IAAI,CAACd,UAAU,CAACc,GAAG,EAAE;MACrD,MAAM,IAAIT,KAAK,CACb,uHACF,CAAC;IACH;IAEA,IAAI,CAACJ,OAAO,CAACc,IAAI,CAAC;MAChBC,IAAI,EAAEH,WAAW,CAACG,IAAI;MACtBC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;EAEAC,GAAGA,CAACL,WAAW,EAAEM,IAAI,EAAEC,OAAO,EAAE;IAC9B,IAAI,CAACjB,mBAAmB,CAAC,KAAK,CAAC;IAC/B,IAAI,EAAEU,WAAW,YAAYpB,0BAA0B,CAAC,EAAE;MACxD,MAAM,IAAIY,KAAK,CACb,2FACF,CAAC;IACH;IAEA,IAAIQ,WAAW,CAACd,SAAS,CAACe,GAAG,KAAK,IAAI,CAACd,UAAU,CAACc,GAAG,EAAE;MACrD,MAAM,IAAIT,KAAK,CACb,oHACF,CAAC;IACH;IAEA,IAAI,CAACb,QAAQ,CAAC2B,IAAI,CAAC,EAAE;MACnB,MAAM,IAAId,KAAK,CAAC,gEAAgE,CAAC;IACnF;IAEA,IAAIgB,UAAU;IACd,IAAI;MACFA,UAAU,GAAG3B,eAAe,CAAC0B,OAAO,CAAC;IACvC,CAAC,CAAC,OAAOE,CAAC,EAAE;MACV,MAAM,IAAIjB,KAAK,CAAE,wCAAuCiB,CAAC,CAACC,OAAQ,GAAE,CAAC;IACvE;IAEA,IAAI,CAACtB,OAAO,CAACc,IAAI,CAAC;MAChBC,IAAI,EAAEH,WAAW,CAACG,IAAI;MACtBC,IAAI,EAAE,KAAK;MACXE,IAAI,EAAEvB,cAAc,CAACuB,IAAI,EAAE,IAAI,CAACnB,UAAU,CAACwB,SAAS,CAACC,yBAAyB,CAAC;MAC/EL,OAAO,EAAEC;IACX,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;EAEAK,MAAMA,CAACb,WAAW,EAAE,GAAGc,IAAI,EAAE;IAC3B,IAAI,CAACxB,mBAAmB,CAAC,QAAQ,CAAC;IAClC,IAAI,EAAEU,WAAW,YAAYpB,0BAA0B,CAAC,EAAE;MACxD,MAAM,IAAIY,KAAK,CACb,8FACF,CAAC;IACH;IAEA,IAAIQ,WAAW,CAACd,SAAS,CAACe,GAAG,KAAK,IAAI,CAACd,UAAU,CAACc,GAAG,EAAE;MACrD,MAAM,IAAIT,KAAK,CACb,uHACF,CAAC;IACH;IAEA,IAAIsB,IAAI,CAACpB,MAAM,KAAK,CAAC,EAAE;MACrB,MAAM,IAAIF,KAAK,CACb,+GACF,CAAC;IACH;IAEA,IAAIc,IAAI;IACR,IAAI;MACFA,IAAI,GAAGxB,eAAe,CAACgC,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOL,CAAC,EAAE;MACV,MAAM,IAAIjB,KAAK,CAAE,6CAA4CiB,CAAC,CAACC,OAAQ,EAAC,CAAC;IAC3E;IAEA,IAAI,CAACtB,OAAO,CAACc,IAAI,CAAC;MAChBC,IAAI,EAAEH,WAAW,CAACG,IAAI;MACtBC,IAAI,EAAE,QAAQ;MACdE,IAAI,EAAEvB,cAAc,CAACuB,IAAI,EAAE,IAAI,CAACnB,UAAU,CAACwB,SAAS,CAACC,yBAAyB;IAChF,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}