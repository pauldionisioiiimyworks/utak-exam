{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from './utils/serialize';\nexport const TypeFieldValueDelete = 'delete';\nexport const TypeFieldValueIncrement = 'increment';\nexport const TypeFieldValueRemove = 'array_remove';\nexport const TypeFieldValueUnion = 'array_union';\nexport const TypeFieldValueTimestamp = 'timestamp';\nfunction validateArrayElements(elements) {\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\nexport default class FirestoreFieldValue {\n  constructor(internal = false, type, elements) {\n    if (internal === false) {\n      throw new Error('firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.');\n    }\n    this._type = type;\n    this._elements = elements;\n  }\n  static delete() {\n    return new FirestoreFieldValue(true, TypeFieldValueDelete);\n  }\n  static increment(n) {\n    if (!isNumber(n)) {\n      throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n    }\n    return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n  }\n  static serverTimestamp() {\n    return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n  }\n  static arrayUnion(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(`firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. ${e.message}`);\n    }\n    return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n  }\n  static arrayRemove(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(`firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. ${e.message}`);\n    }\n    return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n  }\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldValue)) {\n      throw new Error(\"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\");\n    }\n    return this._type === other._type && JSON.stringify(this._elements) === JSON.stringify(other._elements);\n  }\n}\nprovideFieldValueClass(FirestoreFieldValue); // serialize","map":{"version":3,"names":["isArray","isNumber","buildNativeArray","provideFieldValueClass","TypeFieldValueDelete","TypeFieldValueIncrement","TypeFieldValueRemove","TypeFieldValueUnion","TypeFieldValueTimestamp","validateArrayElements","elements","i","length","element","FirestoreFieldValue","Error","constructor","internal","type","_type","_elements","delete","increment","n","serverTimestamp","arrayUnion","e","message","arrayRemove","isEqual","other","JSON","stringify"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldValue.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from './utils/serialize';\n\nexport const TypeFieldValueDelete = 'delete';\nexport const TypeFieldValueIncrement = 'increment';\nexport const TypeFieldValueRemove = 'array_remove';\nexport const TypeFieldValueUnion = 'array_union';\nexport const TypeFieldValueTimestamp = 'timestamp';\n\nfunction validateArrayElements(elements) {\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\n\nexport default class FirestoreFieldValue {\n  constructor(internal = false, type, elements) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.',\n      );\n    }\n\n    this._type = type;\n    this._elements = elements;\n  }\n\n  static delete() {\n    return new FirestoreFieldValue(true, TypeFieldValueDelete);\n  }\n\n  static increment(n) {\n    if (!isNumber(n)) {\n      throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n  }\n\n  static serverTimestamp() {\n    return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n  }\n\n  static arrayUnion(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n  }\n\n  static arrayRemove(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldValue)) {\n      throw new Error(\n        \"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\",\n      );\n    }\n\n    return (\n      this._type === other._type &&\n      JSON.stringify(this._elements) === JSON.stringify(other._elements)\n    );\n  }\n}\n\nprovideFieldValueClass(FirestoreFieldValue); // serialize\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}