{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isBoolean, isFunction, isObject, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n  get docs() {\n    return this._docs;\n  }\n  get empty() {\n    return this._docs.length === 0;\n  }\n  get metadata() {\n    return this._metadata;\n  }\n  get query() {\n    return this._query;\n  }\n  get size() {\n    return this._docs.length;\n  }\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\");\n    }\n    let includeMetaDataChanges = false;\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\");\n      }\n      includeMetaDataChanges = options.includeMetadataChanges;\n    }\n\n    // A get query should always return the document changes from native\n    if (this._source === 'get') {\n      return this._changes;\n    }\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error('firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().');\n    }\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n      return true;\n    });\n  }\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\");\n    }\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\");\n    }\n\n    // Simple checks first\n    if (this.empty !== other.empty || this.size !== other.size || !this.metadata.isEqual(other.metadata)) {\n      return false;\n    }\n\n    // Expensive check\n    // Each doc must be in order & have the same data\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["isBoolean","isFunction","isObject","isUndefined","FirestoreDocumentChange","FirestoreDocumentSnapshot","FirestoreSnapshotMetadata","FirestoreQuerySnapshot","constructor","firestore","query","nativeData","_query","_source","source","_excludesMetadataChanges","excludesMetadataChanges","_changes","changes","map","$","_docs","documents","_metadata","metadata","docs","empty","length","size","docChanges","options","Error","includeMetaDataChanges","includeMetadataChanges","filter","_isMetadataChange","forEach","callback","thisArg","cb","bind","i","isEqual","other","thisDoc","otherDoc"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreQuerySnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isObject,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\n\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n\n  get docs() {\n    return this._docs;\n  }\n\n  get empty() {\n    return this._docs.length === 0;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get size() {\n    return this._docs.length;\n  }\n\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\",\n      );\n    }\n\n    let includeMetaDataChanges = false;\n\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\n          \"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\",\n        );\n      }\n\n      includeMetaDataChanges = options.includeMetadataChanges;\n    }\n\n    // A get query should always return the document changes from native\n    if (this._source === 'get') {\n      return this._changes;\n    }\n\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error(\n        'firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().',\n      );\n    }\n\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n\n      return true;\n    });\n  }\n\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\",\n      );\n    }\n\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\",\n      );\n    }\n\n    // Simple checks first\n    if (\n      this.empty !== other.empty ||\n      this.size !== other.size ||\n      !this.metadata.isEqual(other.metadata)\n    ) {\n      return false;\n    }\n\n    // Expensive check\n    // Each doc must be in order & have the same data\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}