{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n  constructor(...segments) {\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(`firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`);\n      }\n    }\n    this._segments = segments;\n  }\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\");\n    }\n    return this._toPath() === other._toPath();\n  }\n  _toPath() {\n    return this._segments.join('.');\n  }\n  _toArray() {\n    return this._segments;\n  }\n}\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\");\n  }\n  const found = path.search(RESERVED);\n  if (found > 0) {\n    throw new Error(`Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`);\n  }\n  return new FirestoreFieldPath(...path.split('.'));\n}","map":{"version":3,"names":["isString","RESERVED","RegExp","FirestoreFieldPath","documentId","DOCUMENT_ID","constructor","segments","length","Error","i","segment","_segments","isEqual","other","_toPath","join","_toArray","fromDotSeparatedString","path","startsWith","endsWith","indexOf","found","search","split"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldPath.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\n\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\n\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n\n  constructor(...segments) {\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(\n          `firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`,\n        );\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\",\n      );\n    }\n\n    return this._toPath() === other._toPath();\n  }\n\n  _toPath() {\n    return this._segments.join('.');\n  }\n\n  _toArray() {\n    return this._segments;\n  }\n}\n\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\n\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\n      \"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\",\n    );\n  }\n\n  const found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(\n      `Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`,\n    );\n  }\n\n  return new FirestoreFieldPath(...path.split('.'));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,uCAAuC;AAEhE,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CAAC,aAAa,CAAC;AAE1C,eAAe,MAAMC,kBAAkB,CAAC;EACtC,OAAOC,UAAUA,CAAA,EAAG;IAClB,OAAOC,WAAW;EACpB;EAEAC,WAAWA,CAAC,GAAGC,QAAQ,EAAE;IACvB,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,2EAA2E,CAAC;IAC9F;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACC,MAAM,EAAEE,CAAC,EAAE,EAAE;MACxC,MAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAC,CAAC;MAC3B,IAAI,CAACV,QAAQ,CAACW,OAAO,CAAC,IAAIA,OAAO,KAAK,EAAE,EAAE;QACxC,MAAM,IAAIF,KAAK,CACZ,yDAAwDC,CAAE,gCAC7D,CAAC;MACH;IACF;IAEA,IAAI,CAACE,SAAS,GAAGL,QAAQ;EAC3B;EAEAM,OAAOA,CAACC,KAAK,EAAE;IACb,IAAI,EAAEA,KAAK,YAAYX,kBAAkB,CAAC,EAAE;MAC1C,MAAM,IAAIM,KAAK,CACb,iFACF,CAAC;IACH;IAEA,OAAO,IAAI,CAACM,OAAO,CAAC,CAAC,KAAKD,KAAK,CAACC,OAAO,CAAC,CAAC;EAC3C;EAEAA,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACH,SAAS,CAACI,IAAI,CAAC,GAAG,CAAC;EACjC;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACL,SAAS;EACvB;AACF;AAEA,OAAO,MAAMP,WAAW,GAAG,IAAIF,kBAAkB,CAAC,UAAU,CAAC;AAE7D,OAAO,SAASe,sBAAsBA,CAACC,IAAI,EAAE;EAC3C,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,IAAI,CAACG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACvF,MAAM,IAAIb,KAAK,CACb,6FACF,CAAC;EACH;EAEA,MAAMc,KAAK,GAAGJ,IAAI,CAACK,MAAM,CAACvB,QAAQ,CAAC;EAEnC,IAAIsB,KAAK,GAAG,CAAC,EAAE;IACb,MAAM,IAAId,KAAK,CACZ,uBAAsBU,IAAK,uDAC9B,CAAC;EACH;EAEA,OAAO,IAAIhB,kBAAkB,CAAC,GAAGgB,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}