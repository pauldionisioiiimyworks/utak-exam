{"ast":null,"code":"/**\n * @typedef {import('..').FirebaseFirestoreTypes} FirebaseFirestoreTypes\n * @typedef {import('..').FirebaseFirestoreTypes.CollectionReference} CollectionReference\n * @typedef {import('..').FirebaseFirestoreTypes.DocumentData} DocumentData\n * @typedef {import('..').FirebaseFirestoreTypes.DocumentReference} DocumentReference\n * @typedef {import('..').FirebaseFirestoreTypes.FieldPath} FieldPath\n * @typedef {import('..').FirebaseFirestoreTypes.Module} Firestore\n * @typedef {import('..').FirebaseFirestoreTypes.Query} Query\n * @typedef {import('..').FirebaseFirestoreTypes.SetOptions} SetOptions\n * @typedef {import('..').FirebaseFirestoreTypes.Settings} FirestoreSettings\n * @typedef {import('@firebase/app').FirebaseApp} FirebaseApp\n */\n\nimport { firebase } from '../index';\n\n/**\n * @param {FirebaseApp?} app\n * @returns {Firestore}\n */\nexport function getFirestore(app) {\n  if (app) {\n    return firebase.firestore(app);\n  }\n  return firebase.firestore();\n}\n\n/**\n * @param {Firestore | CollectionReference | DocumentReference<unknown>} parent\n * @param {string?} path\n * @param {string?} pathSegments\n * @returns {DocumentReference}\n */\nexport function doc(parent, path, ...pathSegments) {\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(e => e.replace(/^\\/|\\/$/g, '')).join('/');\n  }\n  return parent.doc(path);\n}\n\n/**\n * @param {Firestore | DocumentReference<unknown> | CollectionReference<unknown>} parent\n * @param {string} path\n * @param {string?} pathSegments\n * @returns {CollectionReference<DocumentData>}\n */\nexport function collection(parent, path, ...pathSegments) {\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(e => e.replace(/^\\/|\\/$/g, '')).join('/');\n  }\n  return parent.collection(path);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {string} collectionId\n * @returns {Query<DocumentData>}\n */\nexport function collectionGroup(firestore, collectionId) {\n  return firestore.collectionGroup(collectionId);\n}\n\n/**\n * @param {DocumentReference} reference\n * @param {import('.').PartialWithFieldValue} data\n * @param {SetOptions?} options\n * @returns {Promise<void>}\n */\nexport function setDoc(reference, data, options) {\n  return reference.set(data, options);\n}\n\n/**\n * @param {DocumentReference} reference\n * @param {string | FieldPath | import('.').UpdateData} fieldOrUpdateData\n * @param {unknown?} value\n * @param {unknown} moreFieldsAndValues\n * @returns {Promise<void>}\n */\nexport function updateDoc(reference, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n  if (!fieldOrUpdateData) {\n    // @ts-ignore\n    return reference.update();\n  }\n  if (!value) {\n    return reference.update(fieldOrUpdateData);\n  }\n  if (!moreFieldsAndValues || !Array.isArray(moreFieldsAndValues)) {\n    return reference.update(fieldOrUpdateData, value);\n  }\n  return reference.update(fieldOrUpdateData, value, ...moreFieldsAndValues);\n}\n\n/**\n * @param {CollectionReference} reference\n * @param {WithFieldValue} data\n * @returns {Promise<DocumentReference>}\n */\nexport function addDoc(reference, data) {\n  return reference.add(data);\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function enableNetwork(firestore) {\n  return firestore.enableNetwork();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function disableNetwork(firestore) {\n  return firestore.disableNetwork();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function clearPersistence(firestore) {\n  return firestore.clearPersistence();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function terminate(firestore) {\n  return firestore.terminate();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function waitForPendingWrites(firestore) {\n  return firestore.waitForPendingWrites();\n}\n\n/**\n * @param {FirebaseApp} app\n * @param {FirestoreSettings} settings\n * @param {string?} databaseId\n * @returns {Promise<Firestore>}\n */\nexport async function initializeFirestore(app, settings /* databaseId */) {\n  // TODO(exaby73): implement 2nd database once it's supported\n  const firestore = firebase.firestore(app);\n  await firestore.settings(settings);\n  return firestore;\n}\n\n/**\n * @param {import('./').LogLevel} logLevel\n * @returns {void}\n */\nexport function setLogLevel(logLevel) {\n  return firebase.firestore.setLogLevel(logLevel);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {(transaction: FirebaseFirestoreTypes.Transaction) => Promise} updateFunction\n * @returns {Promise}\n */\nexport function runTransaction(firestore, updateFunction) {\n  return firestore.runTransaction(updateFunction);\n}\n\n/**\n * @param {Query} query\n * @returns {Promise<FirebaseFirestoreTypes.AggregateQuerySnapshot>}\n */\nexport function getCountFromServer(query) {\n  return query.count().get();\n}\n\n/**\n * @param {Firestore} firestore\n * @param {ReadableStream<Uint8Array> | ArrayBuffer | string} bundleData\n * @returns {import('.').LoadBundleTask}\n */\nexport function loadBundle(firestore, bundleData) {\n  return firestore.loadBundle(bundleData);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {string} name\n * @returns {Query<DocumentData>}\n */\nexport function namedQuery(firestore, name) {\n  return firestore.namedQuery(name);\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {FirebaseFirestoreTypes.WriteBatch}\n */\nexport function writeBatch(firestore) {\n  return firestore.batch();\n}\nexport * from './query';\nexport * from './snapshot';\nexport * from './Bytes';\nexport * from './FieldPath';\nexport * from './FieldValue';\nexport * from './GeoPoint';\nexport * from './Timestamp';","map":{"version":3,"names":["firebase","getFirestore","app","firestore","doc","parent","path","pathSegments","length","map","e","replace","join","collection","collectionGroup","collectionId","setDoc","reference","data","options","set","updateDoc","fieldOrUpdateData","value","moreFieldsAndValues","update","Array","isArray","addDoc","add","enableNetwork","disableNetwork","clearPersistence","terminate","waitForPendingWrites","initializeFirestore","settings","setLogLevel","logLevel","runTransaction","updateFunction","getCountFromServer","query","count","get","loadBundle","bundleData","namedQuery","name","writeBatch","batch"],"sources":["/Users/pauldionisio/Documents/CS/utak/utak-exam-app/node_modules/@react-native-firebase/firestore/lib/modular/index.js"],"sourcesContent":["/**\n * @typedef {import('..').FirebaseFirestoreTypes} FirebaseFirestoreTypes\n * @typedef {import('..').FirebaseFirestoreTypes.CollectionReference} CollectionReference\n * @typedef {import('..').FirebaseFirestoreTypes.DocumentData} DocumentData\n * @typedef {import('..').FirebaseFirestoreTypes.DocumentReference} DocumentReference\n * @typedef {import('..').FirebaseFirestoreTypes.FieldPath} FieldPath\n * @typedef {import('..').FirebaseFirestoreTypes.Module} Firestore\n * @typedef {import('..').FirebaseFirestoreTypes.Query} Query\n * @typedef {import('..').FirebaseFirestoreTypes.SetOptions} SetOptions\n * @typedef {import('..').FirebaseFirestoreTypes.Settings} FirestoreSettings\n * @typedef {import('@firebase/app').FirebaseApp} FirebaseApp\n */\n\nimport { firebase } from '../index';\n\n/**\n * @param {FirebaseApp?} app\n * @returns {Firestore}\n */\nexport function getFirestore(app) {\n  if (app) {\n    return firebase.firestore(app);\n  }\n\n  return firebase.firestore();\n}\n\n/**\n * @param {Firestore | CollectionReference | DocumentReference<unknown>} parent\n * @param {string?} path\n * @param {string?} pathSegments\n * @returns {DocumentReference}\n */\nexport function doc(parent, path, ...pathSegments) {\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(e => e.replace(/^\\/|\\/$/g, '')).join('/');\n  }\n\n  return parent.doc(path);\n}\n\n/**\n * @param {Firestore | DocumentReference<unknown> | CollectionReference<unknown>} parent\n * @param {string} path\n * @param {string?} pathSegments\n * @returns {CollectionReference<DocumentData>}\n */\nexport function collection(parent, path, ...pathSegments) {\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(e => e.replace(/^\\/|\\/$/g, '')).join('/');\n  }\n\n  return parent.collection(path);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {string} collectionId\n * @returns {Query<DocumentData>}\n */\nexport function collectionGroup(firestore, collectionId) {\n  return firestore.collectionGroup(collectionId);\n}\n\n/**\n * @param {DocumentReference} reference\n * @param {import('.').PartialWithFieldValue} data\n * @param {SetOptions?} options\n * @returns {Promise<void>}\n */\nexport function setDoc(reference, data, options) {\n  return reference.set(data, options);\n}\n\n/**\n * @param {DocumentReference} reference\n * @param {string | FieldPath | import('.').UpdateData} fieldOrUpdateData\n * @param {unknown?} value\n * @param {unknown} moreFieldsAndValues\n * @returns {Promise<void>}\n */\nexport function updateDoc(reference, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n  if (!fieldOrUpdateData) {\n    // @ts-ignore\n    return reference.update();\n  }\n\n  if (!value) {\n    return reference.update(fieldOrUpdateData);\n  }\n\n  if (!moreFieldsAndValues || !Array.isArray(moreFieldsAndValues)) {\n    return reference.update(fieldOrUpdateData, value);\n  }\n\n  return reference.update(fieldOrUpdateData, value, ...moreFieldsAndValues);\n}\n\n/**\n * @param {CollectionReference} reference\n * @param {WithFieldValue} data\n * @returns {Promise<DocumentReference>}\n */\nexport function addDoc(reference, data) {\n  return reference.add(data);\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function enableNetwork(firestore) {\n  return firestore.enableNetwork();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function disableNetwork(firestore) {\n  return firestore.disableNetwork();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function clearPersistence(firestore) {\n  return firestore.clearPersistence();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function terminate(firestore) {\n  return firestore.terminate();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function waitForPendingWrites(firestore) {\n  return firestore.waitForPendingWrites();\n}\n\n/**\n * @param {FirebaseApp} app\n * @param {FirestoreSettings} settings\n * @param {string?} databaseId\n * @returns {Promise<Firestore>}\n */\nexport async function initializeFirestore(app, settings /* databaseId */) {\n  // TODO(exaby73): implement 2nd database once it's supported\n  const firestore = firebase.firestore(app);\n  await firestore.settings(settings);\n  return firestore;\n}\n\n/**\n * @param {import('./').LogLevel} logLevel\n * @returns {void}\n */\nexport function setLogLevel(logLevel) {\n  return firebase.firestore.setLogLevel(logLevel);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {(transaction: FirebaseFirestoreTypes.Transaction) => Promise} updateFunction\n * @returns {Promise}\n */\nexport function runTransaction(firestore, updateFunction) {\n  return firestore.runTransaction(updateFunction);\n}\n\n/**\n * @param {Query} query\n * @returns {Promise<FirebaseFirestoreTypes.AggregateQuerySnapshot>}\n */\nexport function getCountFromServer(query) {\n  return query.count().get();\n}\n\n/**\n * @param {Firestore} firestore\n * @param {ReadableStream<Uint8Array> | ArrayBuffer | string} bundleData\n * @returns {import('.').LoadBundleTask}\n */\nexport function loadBundle(firestore, bundleData) {\n  return firestore.loadBundle(bundleData);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {string} name\n * @returns {Query<DocumentData>}\n */\nexport function namedQuery(firestore, name) {\n  return firestore.namedQuery(name);\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {FirebaseFirestoreTypes.WriteBatch}\n */\nexport function writeBatch(firestore) {\n  return firestore.batch();\n}\n\nexport * from './query';\nexport * from './snapshot';\nexport * from './Bytes';\nexport * from './FieldPath';\nexport * from './FieldValue';\nexport * from './GeoPoint';\nexport * from './Timestamp';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}